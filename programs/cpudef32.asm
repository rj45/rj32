; Code generated by github.com/rj45/rj32/emurj/cmd/isagen. DO NOT EDIT.
#bits 8

#subruledef reg {
  x0   =>  0
  x1   =>  1
  x2   =>  2
  x3   =>  3
  x4   =>  4
  x5   =>  5
  x6   =>  6
  x7   =>  7
  x8   =>  8
  x9   =>  9
  x10  => 10
  x11  => 11
  x12  => 12
  x13  => 13
  x14  => 14
  x15  => 15
  x16  => 16
  x17  => 17
  x18  => 18
  x19  => 19
  x20  => 20
  x21  => 21
  x22  => 22
  x23  => 23
  x24  => 24
  x25  => 25
  x26  => 26
  x27  => 27
  x28  => 28
  x29  => 29
  x30  => 30
  x31  => 31

  ; ABI names
  zero =>  0
  ra   =>  1
  sp   =>  2
  gp   =>  3
  tp   =>  4
  t0   =>  5
  t1   =>  6
  t2   =>  7
  s0   =>  8
  s1   =>  9
  a0   => 10
  a1   => 11
  a2   => 12
  a3   => 13
  a4   => 14
  a5   => 15
  a6   => 16
  a7   => 17
  s2   => 18
  s3   => 19
  s4   => 20
  s5   => 21
  s6   => 22
  s7   => 23
  s8   => 24
  s9   => 25
  s10  => 26
  s11  => 27
  t3   => 28
  t4   => 29
  t5   => 30
  t6   => 31
}

#subruledef opcode {
  ; Quadrant 000
  add     => 0b000_000
  slt     => 0b000_001
  sltu    => 0b000_010
  and     => 0b000_011
  or      => 0b000_100
  xor     => 0b000_101
  srl     => 0b000_110
  sll     => 0b000_111

  ; Quadrant 001
  sub     => 0b001_000
  mul     => 0b001_001
  mulh    => 0b001_010
  mulhu   => 0b001_011
  sra     => 0b001_110

  ; Quadrant 010
  ebreak  => 0b010_000
  ecall   => 0b010_001
  sret    => 0b010_010
  mret    => 0b010_011

  ; Quadrant 011
  csrrw   => 0b011_000
  csrrs   => 0b011_001
  csrrc   => 0b011_010
  sfence  => 0b011_100
  fence   => 0b011_101
  fence.i => 0b011_110
  wfi     => 0b011_111

  ; Quadrant 100
  addi    => 0b100_000
  slti    => 0b100_001
  sltiu   => 0b100_010
  andi    => 0b100_011
  ori     => 0b100_100
  xori    => 0b100_101
  srli    => 0b100_110
  slli    => 0b100_111

  ; Quadrant 101
  lw      => 0b101_000
  lr      => 0b101_001
  lh      => 0b101_010
  lb      => 0b101_011
  lhu     => 0b101_100
  lbu     => 0b101_101
  srai    => 0b101_110
  jalr    => 0b101_111

  ; Quadrant 110
  beq     => 0b110_000
  bne     => 0b110_001
  blt     => 0b110_010
  bge     => 0b110_011
  bltu    => 0b110_100
  bgeu    => 0b110_101

  ; Quadrant 111
  sw      => 0b111_000
  sc      => 0b111_001
  sh      => 0b111_010
  sb      => 0b111_011
  lui     => 0b111_100
  auipc   => 0b111_101
  jal     => 0b111_111
}

#ruledef {
  fmt_n {opcode:opcode} => {
    le(0`5 @ 0`1 @ 0`10 @ 0`5 @ 0`5 @ opcode`6)
  }
  fmt_r {opcode:opcode}, {rd:reg}, {rs1:reg}, {rs2:reg} => {
    le(rd`5 @ 0`1 @ 0`10 @ rs2`5 @ rs1`5 @ opcode`6)
  }
  fmt_i {opcode:opcode}, {rd:reg}, {rs1:reg}, {imm:s13} => {
    le(rd`5 @ imm[12:12] @ imm[11:2] @ imm[1:0] @ 0`3 @ rs1`5 @ opcode`6)
  }
  fmt_b {opcode:opcode}, {rs1:reg}, {rs2:reg}, {imm:s13} => {
    le(imm[1:0] @ 0`3 @ imm[12:12] @ imm[11:2] @ rs2`5 @ rs1`5 @ opcode`6)
  }
  fmt_j {opcode:opcode}, {rd:reg}, {imm:s21} => {
    le(rd`5 @ imm[20:20] @ imm[11:2] @ imm[1:0] @ imm[19:12] @ opcode`6)
  }
  fmt_u {opcode:opcode}, {rd:reg}, {imm:u32} => {
    le(rd`5 @ imm[31:31] @ imm[30:21] @ 0`1 @ imm[20:20] @ imm[19:12] @ opcode`6)
  }

  ; Quadrant 000
  add     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r add, {rd}, {rs1}, {rs2} }
  slt     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r slt, {rd}, {rs1}, {rs2} }
  sltu    {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r sltu, {rd}, {rs1}, {rs2} }
  and     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r and, {rd}, {rs1}, {rs2} }
  or      {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r or, {rd}, {rs1}, {rs2} }
  xor     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r xor, {rd}, {rs1}, {rs2} }
  srl     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r srl, {rd}, {rs1}, {rs2} }
  sll     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r sll, {rd}, {rs1}, {rs2} }

  ; Quadrant 001
  sub     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r sub, {rd}, {rs1}, {rs2} }
  mul     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r mul, {rd}, {rs1}, {rs2} }
  mulh    {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r mulh, {rd}, {rs1}, {rs2} }
  mulhu   {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r mulhu, {rd}, {rs1}, {rs2} }
  sra     {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r sra, {rd}, {rs1}, {rs2} }

  ; Quadrant 010
  ebreak   => asm { fmt_n ebreak }
  ecall    => asm { fmt_n ecall }
  sret     => asm { fmt_n sret }
  mret     => asm { fmt_n mret }

  ; Quadrant 011
  csrrw   {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r csrrw, {rd}, {rs1}, {rs2} }
  csrrs   {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r csrrs, {rd}, {rs1}, {rs2} }
  csrrc   {rd:reg}, {rs1:reg}, {rs2:reg} => asm { fmt_r csrrc, {rd}, {rs1}, {rs2} }
  sfence   => asm { fmt_n sfence }
  fence    => asm { fmt_n fence }
  fence.i  => asm { fmt_n fence.i }
  wfi      => asm { fmt_n wfi }

  ; Quadrant 100
  addi    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i addi, {rd}, {rs1}, imm }
  slti    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i slti, {rd}, {rs1}, imm }
  sltiu   {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i sltiu, {rd}, {rs1}, imm }
  andi    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i andi, {rd}, {rs1}, imm }
  ori     {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i ori, {rd}, {rs1}, imm }
  xori    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i xori, {rd}, {rs1}, imm }
  srli    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i srli, {rd}, {rs1}, imm }
  slli    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i slli, {rd}, {rs1}, imm }

  ; Quadrant 101
  lw      {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lw, {rd}, {rs1}, imm }
  lr      {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lr, {rd}, {rs1}, imm }
  lh      {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lh, {rd}, {rs1}, imm }
  lb      {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lb, {rd}, {rs1}, imm }
  lhu     {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lhu, {rd}, {rs1}, imm }
  lbu     {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i lbu, {rd}, {rs1}, imm }
  srai    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i srai, {rd}, {rs1}, imm }
  jalr    {rd:reg}, {rs1:reg}, {imm} => asm { fmt_i jalr, {rd}, {rs1}, imm - pc - 1 }

  ; Quadrant 110
  beq     {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b beq, {rs1}, {rs2}, imm - pc - 1 }
  bne     {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b bne, {rs1}, {rs2}, imm - pc - 1 }
  blt     {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b blt, {rs1}, {rs2}, imm - pc - 1 }
  bge     {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b bge, {rs1}, {rs2}, imm - pc - 1 }
  bltu    {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b bltu, {rs1}, {rs2}, imm - pc - 1 }
  bgeu    {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b bgeu, {rs1}, {rs2}, imm - pc - 1 }

  ; Quadrant 111
  sw      {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b sw, {rs1}, {rs2}, imm }
  sc      {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b sc, {rs1}, {rs2}, imm }
  sh      {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b sh, {rs1}, {rs2}, imm }
  sb      {rs1:reg}, {rs2:reg}, {imm} => asm { fmt_b sb, {rs1}, {rs2}, imm }
  lui     {rd:reg}, {imm} => asm { fmt_u lui, {rd}, imm }
  auipc   {rd:reg}, {imm} => asm { fmt_u auipc, {rd}, imm - pc - 1 }
  jal     {rd:reg}, {imm} => asm { fmt_j jal, {rd}, imm - pc - 1 }
}

