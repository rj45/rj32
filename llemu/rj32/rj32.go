// Code generated by github.com/rj45/rj32/emurj/cmd/isagen. DO NOT EDIT.

package rj32

type Reg uint8

const (
	Zero Reg = iota
	Ra
	Sp
	Gp
	Tp
	T0
	T1
	T2
	S0
	S1
	A0
	A1
	A2
	A3
	A4
	A5
	A6
	A7
	S2
	S3
	S4
	S5
	S6
	S7
	S8
	S9
	S10
	S11
	T3
	T4
	T5
	T6
)

var regNames = [...]string{
	Zero: "zero",
	Ra:   "ra",
	Sp:   "sp",
	Gp:   "gp",
	Tp:   "tp",
	T0:   "t0",
	T1:   "t1",
	T2:   "t2",
	S0:   "s0",
	S1:   "s1",
	A0:   "a0",
	A1:   "a1",
	A2:   "a2",
	A3:   "a3",
	A4:   "a4",
	A5:   "a5",
	A6:   "a6",
	A7:   "a7",
	S2:   "s2",
	S3:   "s3",
	S4:   "s4",
	S5:   "s5",
	S6:   "s6",
	S7:   "s7",
	S8:   "s8",
	S9:   "s9",
	S10:  "s10",
	S11:  "s11",
	T3:   "t3",
	T4:   "t4",
	T5:   "t5",
	T6:   "t6",
}

func (r Reg) String() string { return regNames[r] }

type Fmt uint8

const (
	N Fmt = iota
	R
	I
	B
	J
	U
)

var fmtNames = [...]string{
	N: "N",
	R: "R",
	I: "I",
	B: "B",
	J: "J",
	U: "U",
}

func (f Fmt) String() string { return fmtNames[f] }

type Opcode uint8

const (
	Add    Opcode = 0b000_000
	Slt    Opcode = 0b000_001
	Sltu   Opcode = 0b000_010
	And    Opcode = 0b000_011
	Or     Opcode = 0b000_100
	Xor    Opcode = 0b000_101
	Srl    Opcode = 0b000_110
	Sll    Opcode = 0b000_111
	Sub    Opcode = 0b001_000
	Mul    Opcode = 0b001_001
	Mulh   Opcode = 0b001_010
	Mulhu  Opcode = 0b001_011
	Sra    Opcode = 0b001_110
	Ebreak Opcode = 0b010_000
	Ecall  Opcode = 0b010_001
	Sret   Opcode = 0b010_010
	Mret   Opcode = 0b010_011
	Csrrw  Opcode = 0b011_000
	Csrrs  Opcode = 0b011_001
	Csrrc  Opcode = 0b011_010
	Sfence Opcode = 0b011_100
	Fence  Opcode = 0b011_101
	Fencei Opcode = 0b011_110
	Wfi    Opcode = 0b011_111
	Addi   Opcode = 0b100_000
	Slti   Opcode = 0b100_001
	Sltiu  Opcode = 0b100_010
	Andi   Opcode = 0b100_011
	Ori    Opcode = 0b100_100
	Xori   Opcode = 0b100_101
	Srli   Opcode = 0b100_110
	Slli   Opcode = 0b100_111
	Lw     Opcode = 0b101_000
	Lr     Opcode = 0b101_001
	Lh     Opcode = 0b101_010
	Lb     Opcode = 0b101_011
	Lhu    Opcode = 0b101_100
	Lbu    Opcode = 0b101_101
	Srai   Opcode = 0b101_110
	Jalr   Opcode = 0b101_111
	Beq    Opcode = 0b110_000
	Bne    Opcode = 0b110_001
	Blt    Opcode = 0b110_010
	Bge    Opcode = 0b110_011
	Bltu   Opcode = 0b110_100
	Bgeu   Opcode = 0b110_101
	Sw     Opcode = 0b111_000
	Sc     Opcode = 0b111_001
	Sh     Opcode = 0b111_010
	Sb     Opcode = 0b111_011
	Lui    Opcode = 0b111_100
	Auipc  Opcode = 0b111_101
	Jal    Opcode = 0b111_111
)

var opcodeNames = [...]string{
	Add:    "add",
	Slt:    "slt",
	Sltu:   "sltu",
	And:    "and",
	Or:     "or",
	Xor:    "xor",
	Srl:    "srl",
	Sll:    "sll",
	Sub:    "sub",
	Mul:    "mul",
	Mulh:   "mulh",
	Mulhu:  "mulhu",
	Sra:    "sra",
	Ebreak: "ebreak",
	Ecall:  "ecall",
	Sret:   "sret",
	Mret:   "mret",
	Csrrw:  "csrrw",
	Csrrs:  "csrrs",
	Csrrc:  "csrrc",
	Sfence: "sfence",
	Fence:  "fence",
	Fencei: "fence.i",
	Wfi:    "wfi",
	Addi:   "addi",
	Slti:   "slti",
	Sltiu:  "sltiu",
	Andi:   "andi",
	Ori:    "ori",
	Xori:   "xori",
	Srli:   "srli",
	Slli:   "slli",
	Lw:     "lw",
	Lr:     "lr",
	Lh:     "lh",
	Lb:     "lb",
	Lhu:    "lhu",
	Lbu:    "lbu",
	Srai:   "srai",
	Jalr:   "jalr",
	Beq:    "beq",
	Bne:    "bne",
	Blt:    "blt",
	Bge:    "bge",
	Bltu:   "bltu",
	Bgeu:   "bgeu",
	Sw:     "sw",
	Sc:     "sc",
	Sh:     "sh",
	Sb:     "sb",
	Lui:    "lui",
	Auipc:  "auipc",
	Jal:    "jal",
}

func (o Opcode) String() string { return opcodeNames[o] }

type Inst uint32

func (i Inst) Fmt() Fmt {
	if (i & 0b111111) == 0b111111 {
		return J
	}
	if (i & 0b111100) == 0b111100 {
		return U
	}
	if (i & 0b110000) == 0b110000 {
		return B
	}
	if (i & 0b100000) == 0b100000 {
		return I
	}
	if (i & 0b111100) == 0b010000 {
		return N
	}
	if (i & 0b111100) == 0b011100 {
		return N
	}
	return R
}

func (i Inst) Opcode() Opcode {
	return Opcode((i >> 0) & 0b111111)
}

func (i Inst) Rd() Reg {
	return Reg((i >> 27) & 0b11111)
}

func (i Inst) Rs1() Reg {
	return Reg((i >> 6) & 0b11111)
}

func (i Inst) Rs2() Reg {
	return Reg((i >> 11) & 0b11111)
}

func (i Inst) Imm() int32 {
	if (i & 0b100000) == 0b100000 { // I fmt
		s := int32((i >> 26) & 0b1)
		i1 := int32((i >> 16) & 0b1111111111)
		i2 := int32((i >> 14) & 0b11)
		return ((s<<12 | i1<<2 | i2<<0) << 19) >> 19
	}
	if (i & 0b110000) == 0b110000 { // B fmt
		i4 := int32((i >> 30) & 0b11)
		s := int32((i >> 26) & 0b1)
		i1 := int32((i >> 16) & 0b1111111111)
		return ((i4<<0 | s<<12 | i1<<2) << 19) >> 19
	}
	if (i & 0b111111) == 0b111111 { // J fmt
		s := int32((i >> 26) & 0b1)
		i1 := int32((i >> 16) & 0b1111111111)
		i2 := int32((i >> 14) & 0b11)
		i3 := int32((i >> 6) & 0b11111111)
		return ((s<<20 | i1<<2 | i2<<0 | i3<<12) << 11) >> 11
	}
	if (i & 0b111100) == 0b111100 { // U fmt
		s := int32((i >> 26) & 0b1)
		i1 := int32((i >> 16) & 0b1111111111)
		i2 := int32((i >> 14) & 0b11)
		i3 := int32((i >> 6) & 0b11111111)
		return s<<31 | i1<<21 | (i2&0b1)<<20 | i3<<12
	}
	return 0
}
