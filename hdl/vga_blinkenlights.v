/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule

module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module vga_timing (
  input en,
  input clock,
  input [11:0] res,
  input [11:0] fp,
  input [11:0] sync,
  input [11:0] bp,
  input neg,
  output [11:0] V,
  output pulse,
  output next
);
  wire [11:0] s0;
  wire next_temp;
  wire [11:0] V_temp;
  wire [11:0] s1;
  wire [11:0] s2;
  wire [11:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i0 (
    .a( res ),
    .b( 12'b1 ),
    .c_i( 1'b0 ),
    .s( s1 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i1 (
    .a( 12'b0 ),
    .b( bp ),
    .c_i( 1'b0 ),
    .s( s2 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i2 (
    .a( s2 ),
    .b( sync ),
    .c_i( 1'b0 ),
    .s( s3 )
  );
  DIG_Sub #(
    .Bits(12)
  )
  DIG_Sub_i3 (
    .a( s3 ),
    .b( fp ),
    .c_i( 1'b0 ),
    .s( s0 )
  );
  DIG_CounterPreset #(
    .Bits(12),
    .maxValue(0)
  )
  DIG_CounterPreset_i4 (
    .en( en ),
    .C( clock ),
    .dir( 1'b0 ),
    .in( s0 ),
    .ld( next_temp ),
    .clr( 1'b0 ),
    .out( V_temp )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i5 (
    .a( V_temp ),
    .b( s1 ),
    .\= ( next_temp )
  );
  assign pulse = (s4 ^ neg);
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i6 (
    .a( V_temp ),
    .b( s2 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i7 (
    .a( V_temp ),
    .b( s3 ),
    .\= ( s6 )
  );
  assign s7 = (~ s5 & (s6 | s4));
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s7 ),
    .C( clock ),
    .Q( s4 )
  );
  assign V = V_temp;
  assign next = next_temp;
endmodule

module vga_sync (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  output H,
  output V,
  output pic,
  output [11:0] X,
  output [11:0] Y,
  output hblank,
  output vblank
);
  wire [11:0] X_temp;
  wire s0;
  wire [11:0] Y_temp;
  wire s1;
  wire s2;
  // Horiz
  vga_timing vga_timing_i0 (
    .en( 1'b1 ),
    .clock( clock ),
    .res( res_H ),
    .fp( bp_H ),
    .sync( sync_H ),
    .bp( fp_H ),
    .neg( neg_H ),
    .V( X_temp ),
    .pulse( H ),
    .next( s0 )
  );
  // Vert
  vga_timing vga_timing_i1 (
    .en( s0 ),
    .clock( clock ),
    .res( res_V ),
    .fp( bp_V ),
    .sync( sync_V ),
    .bp( fp_V ),
    .neg( neg_V ),
    .V( Y_temp ),
    .pulse( V )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i2 (
    .a( X_temp ),
    .b( res_H ),
    .\< ( s1 )
  );
  CompUnsigned #(
    .Bits(12)
  )
  CompUnsigned_i3 (
    .a( Y_temp ),
    .b( res_V ),
    .\< ( s2 )
  );
  assign hblank = ~ s1;
  assign pic = (s1 & s2);
  assign vblank = ~ s2;
  assign X = X_temp;
  assign Y = Y_temp;
endmodule
module DIG_BitExtender #(
    parameter inputBits = 2,
    parameter outputBits = 4
)
(
    input [(inputBits-1):0] in,
    output [(outputBits - 1):0] out
);
    assign out = {{(outputBits - inputBits){in[inputBits - 1]}}, in};
endmodule




module vga_charpos (
  input [11:0] X,
  input [11:0] Y,
  output [4:0] row,
  output [3:0] col,
  output [7:0] CX,
  output [7:0] CY
);
  wire [12:0] s0;
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(13)
  )
  DIG_BitExtender_i0 (
    .in( Y ),
    .out( s0 )
  );
  assign col = X[3:0];
  assign CX = X[11:4];
  assign row = s0[4:0];
  assign CY = s0[12:5];
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_ROM_64X16_PalletROM (
    input [5:0] A,
    input sel,
    output reg [15:0] D
);
    reg [15:0] my_rom [0:31];

    always @ (*) begin
        if (~sel)
            D = 16'hz;
        else if (A > 6'h1f)
            D = 16'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 16'h0;
        my_rom[1] = 16'h0;
        my_rom[2] = 16'h0;
        my_rom[3] = 16'h0;
        my_rom[4] = 16'h0;
        my_rom[5] = 16'hf144;
        my_rom[6] = 16'hf1aa;
        my_rom[7] = 16'hf0ee;
        my_rom[8] = 16'h0;
        my_rom[9] = 16'hf124;
        my_rom[10] = 16'hf15a;
        my_rom[11] = 16'hf07e;
        my_rom[12] = 16'h0;
        my_rom[13] = 16'hf420;
        my_rom[14] = 16'hfa50;
        my_rom[15] = 16'hfe70;
        my_rom[16] = 16'h0;
        my_rom[17] = 16'hf412;
        my_rom[18] = 16'hfa15;
        my_rom[19] = 16'hfe07;
        my_rom[20] = 16'h0;
        my_rom[21] = 16'hf214;
        my_rom[22] = 16'hf51a;
        my_rom[23] = 16'hf70e;
        my_rom[24] = 16'h0;
        my_rom[25] = 16'hf241;
        my_rom[26] = 16'hf5a1;
        my_rom[27] = 16'hf7e0;
        my_rom[28] = 16'h0;
        my_rom[29] = 16'hf555;
        my_rom[30] = 16'hfbbb;
        my_rom[31] = 16'hffff;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module vga_text (
  input H_i,
  input V_i,
  input pic,
  input [4:0] row,
  input [3:0] col,
  input [15:0] TD,
  input [7:0] MD,
  input clock,
  input [6:0] char,
  input [3:0] fg,
  input [11:0] bg,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] TA,
  output [9:0] MA
);
  wire [6:0] s0;
  wire [5:0] s1;
  wire [2:0] s2;
  wire [1:0] s3;
  wire [1:0] s4;
  wire [1:0] s5;
  wire [1:0] s6;
  wire [1:0] s7;
  wire [1:0] s8;
  wire [1:0] s9;
  wire [1:0] s10;
  wire [1:0] s11;
  wire s12;
  wire [11:0] s13;
  wire [11:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [2:0] s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire [11:0] s24;
  wire [11:0] s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire [3:0] s30;
  wire [3:0] s31;
  wire [4:0] s32;
  wire [4:0] s33;
  wire s34;
  wire s35;
  wire [11:0] s36;
  wire [3:0] s37;
  wire [3:0] s38;
  wire [5:0] s39;
  wire [15:0] s40;
  wire [11:0] s41;
  wire [3:0] s42;
  wire [2:0] s43;
  wire s44;
  wire [3:0] s45;
  wire [2:0] s46;
  wire [2:0] s47;
  DIG_D_FF_Nbit #(
    .Bits(7),
    .Default(0)
  )
  DIG_D_FF_Nbit_i0 (
    .D( char ),
    .C( clock ),
    .Q( s0 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i1 (
    .D( bg ),
    .C( clock ),
    .Q( s36 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i2 (
    .D( fg ),
    .C( clock ),
    .Q( s37 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( H_i ),
    .C( clock ),
    .Q( s26 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( V_i ),
    .C( clock ),
    .Q( s28 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i5 (
    .D( col ),
    .C( clock ),
    .Q( s30 )
  );
  DIG_D_FF_Nbit #(
    .Bits(5),
    .Default(0)
  )
  DIG_D_FF_Nbit_i6 (
    .D( row ),
    .C( clock ),
    .Q( s32 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( pic ),
    .C( clock ),
    .Q( s34 )
  );
  assign s3 = TD[1:0];
  assign s4 = TD[3:2];
  assign s5 = TD[5:4];
  assign s6 = TD[7:6];
  assign s7 = TD[9:8];
  assign s8 = TD[11:10];
  assign s9 = TD[13:12];
  assign s10 = TD[15:14];
  assign s1[4:0] = s0[4:0];
  assign s1[5] = s0[6];
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s26 ),
    .C( clock ),
    .Q( s27 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s28 ),
    .C( clock ),
    .Q( s29 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i10 (
    .D( s30 ),
    .C( clock ),
    .Q( s31 )
  );
  DIG_D_FF_Nbit #(
    .Bits(5),
    .Default(0)
  )
  DIG_D_FF_Nbit_i11 (
    .D( s32 ),
    .C( clock ),
    .Q( s33 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i12 (
    .D( s34 ),
    .C( clock ),
    .Q( s35 )
  );
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i13 (
    .D( s36 ),
    .C( clock ),
    .Q( s24 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i14 (
    .D( s37 ),
    .C( clock ),
    .Q( s45 )
  );
  assign MA[0] = s31[3];
  assign MA[2:1] = s33[4:3];
  assign MA[8:3] = s1;
  assign MA[9] = 1'b0;
  DIG_D_FF_Nbit #(
    .Bits(12),
    .Default(0)
  )
  DIG_D_FF_Nbit_i15 (
    .D( s24 ),
    .C( clock ),
    .Q( s25 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i16 (
    .D( s45 ),
    .C( clock ),
    .Q( s38 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i17 (
    .D( s27 ),
    .C( clock ),
    .Q( s19 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i18 (
    .D( s29 ),
    .C( clock ),
    .Q( s21 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i19 (
    .D( s35 ),
    .C( clock ),
    .Q( s23 )
  );
  assign s43 = s31[2:0];
  assign s46 = s33[2:0];
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i20 (
    .D( s19 ),
    .C( clock ),
    .Q( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i21 (
    .D( s21 ),
    .C( clock ),
    .Q( s22 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i22 (
    .D( s23 ),
    .C( clock ),
    .Q( s12 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i23 (
    .D( s43 ),
    .C( clock ),
    .Q( s18 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i24 (
    .D( s46 ),
    .C( clock ),
    .Q( s47 )
  );
  DIG_D_FF_Nbit #(
    .Bits(3),
    .Default(0)
  )
  DIG_D_FF_Nbit_i25 (
    .D( s18 ),
    .C( clock ),
    .Q( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i26 (
    .D( s22 ),
    .C( clock ),
    .Q( vs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i27 (
    .D( s20 ),
    .C( clock ),
    .Q( hs )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i28 (
    .D( s12 ),
    .C( clock ),
    .Q( de )
  );
  assign TA[2:0] = s47;
  assign TA[10:3] = MD;
  Mux_8x1_NBits #(
    .Bits(2)
  )
  Mux_8x1_NBits_i29 (
    .sel( s2 ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s6 ),
    .in_4( s7 ),
    .in_5( s8 ),
    .in_6( s9 ),
    .in_7( s10 ),
    .out( s11 )
  );
  assign s39[1:0] = s11;
  assign s39[5:2] = s38;
  // Pallet ROM
  DIG_ROM_64X16_PalletROM DIG_ROM_64X16_PalletROM_i30 (
    .A( s39 ),
    .sel( 1'b1 ),
    .D( s40 )
  );
  assign s41 = s40[11:0];
  assign s42 = s40[15:12];
  // transparent?
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i31 (
    .a( s42 ),
    .b( 4'b0 ),
    .\= ( s44 )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i32 (
    .sel( s44 ),
    .in_0( s41 ),
    .in_1( s25 ),
    .out( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i33 (
    .sel( s12 ),
    .in_0( 12'b0 ),
    .in_1( s13 ),
    .out( s14 )
  );
  assign s15 = s14[3:0];
  assign s16 = s14[7:4];
  assign s17 = s14[11:8];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i34 (
    .D( s15 ),
    .C( clock ),
    .Q( B )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i35 (
    .D( s16 ),
    .C( clock ),
    .Q( G )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i36 (
    .D( s17 ),
    .C( clock ),
    .Q( R )
  );
endmodule

module vga_display (
  input clock,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  input [6:0] char,
  input [3:0] fg,
  input [11:0] bg,
  input [15:0] TD,
  input [7:0] MD,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [7:0] CX,
  output [7:0] CY,
  output vblank,
  output hblank,
  output [10:0] TA,
  output [9:0] MA
);
  wire s0;
  wire s1;
  wire s2;
  wire [11:0] s3;
  wire [11:0] s4;
  wire [4:0] s5;
  wire [3:0] s6;
  vga_sync vga_sync_i0 (
    .clock( clock ),
    .res_H( res_H ),
    .fp_H( bp_H ),
    .sync_H( sync_H ),
    .bp_H( fp_H ),
    .neg_H( neg_H ),
    .res_V( res_V ),
    .fp_V( bp_V ),
    .sync_V( sync_V ),
    .bp_V( fp_V ),
    .neg_V( neg_V ),
    .H( s0 ),
    .V( s1 ),
    .pic( s2 ),
    .X( s3 ),
    .Y( s4 ),
    .hblank( hblank ),
    .vblank( vblank )
  );
  vga_charpos vga_charpos_i1 (
    .X( s3 ),
    .Y( s4 ),
    .row( s5 ),
    .col( s6 ),
    .CX( CX ),
    .CY( CY )
  );
  vga_text vga_text_i2 (
    .H_i( s0 ),
    .V_i( s1 ),
    .pic( s2 ),
    .row( s5 ),
    .col( s6 ),
    .TD( TD ),
    .MD( MD ),
    .clock( clock ),
    .char( char ),
    .fg( fg ),
    .bg( bg ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs( hs ),
    .vs( vs ),
    .de( de ),
    .TA( TA ),
    .MA( MA )
  );
endmodule

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module debugval (
  input [25:0] db_i,
  input [7:0] sel,
  output [25:0] db_o,
  output [15:0] Q
);
  wire [15:0] s0;
  wire s1;
  wire s2;
  wire [7:0] s3;
  wire s4;
  assign s0 = db_i[15:0];
  assign s3 = db_i[24:17];
  assign s1 = db_i[25];
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i0 (
    .a( s3 ),
    .b( sel ),
    .\= ( s4 )
  );
  assign s2 = (db_i[16] & s4);
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( s0 ),
    .C( s1 ),
    .en( s2 ),
    .Q( Q )
  );
  assign db_o = db_i;
endmodule
module DIG_RAMDualAccess
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input C, // Clock signal
    input ld,
    input [(AddrBits-1):0] \1A ,
    input [(AddrBits-1):0] \2A ,
    input [(Bits-1):0] \1Din ,
    input str,
    output [(Bits-1):0] \1D ,
    output [(Bits-1):0] \2D
);
    // CAUTION: uses distributed RAM
    reg [(Bits-1):0] memory [0:((1 << AddrBits)-1)];

    assign \1D = ld? memory[\1A ] : 'hz;
    assign \2D = memory[\2A ];

    always @ (posedge C) begin
        if (str)
            memory[\1A ] <= \1Din ;
    end

endmodule



module debugcopy (
  input [25:0] db,
  input clock,
  input e,
  input [4:0] db_A,
  output [15:0] db_D,
  output [15:0] decode,
  output [15:0] ctrl
);
  wire [24:0] s0;
  wire s1;
  wire [24:0] s2;
  wire [24:0] s3;
  wire [24:0] s4;
  wire [7:0] s5;
  wire [15:0] s6;
  wire s7;
  wire [4:0] s8;
  wire [25:0] s9;
  wire [25:0] s10;
  assign s0 = db[24:0];
  assign s1 = db[25];
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( s1 ),
    .en( 1'b1 ),
    .Q( s2 )
  );
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i1 (
    .D( s2 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s3 )
  );
  DIG_Register_BUS #(
    .Bits(25)
  )
  DIG_Register_BUS_i2 (
    .D( s3 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s4 )
  );
  assign s7 = (e & s4[16]);
  assign s9[24:0] = s4;
  assign s9[25] = clock;
  assign s5 = s4[24:17];
  assign s6 = s4[15:0];
  debugval debugval_i3 (
    .db_i( s9 ),
    .sel( 8'b10111 ),
    .db_o( s10 ),
    .Q( decode )
  );
  assign s8 = s5[4:0];
  // DB Copy
  DIG_RAMDualAccess #(
    .Bits(16),
    .AddrBits(5)
  )
  DIG_RAMDualAccess_i4 (
    .str( s7 ),
    .C( clock ),
    .ld( 1'b0 ),
    .\1A ( s8 ),
    .\1Din ( s6 ),
    .\2A ( db_A ),
    .\2D ( db_D )
  );
  debugval debugval_i5 (
    .db_i( s10 ),
    .sel( 8'b11000 ),
    .Q( ctrl )
  );
endmodule

module DIG_Neg #(
    parameter Bits = 1
)
(
      input signed [(Bits-1):0] in,
      output signed [(Bits-1):0] out
);
    assign out = -in;
endmodule


module unsign (
  input [15:0] i,
  input sgn,
  output [15:0] o,
  output s
);
  wire s_temp;
  wire [15:0] s0;
  DIG_Neg #(
    .Bits(16)
  )
  DIG_Neg_i0 (
    .in( i ),
    .out( s0 )
  );
  assign s_temp = (i[15] & sgn);
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i1 (
    .sel( s_temp ),
    .in_0( i ),
    .in_1( s0 ),
    .out( o )
  );
  assign s = s_temp;
endmodule

module gt4add3 (
  input [3:0] I,
  output [3:0] O
);
  wire I_0;
  wire I_2;
  wire s0;
  wire s1;
  wire s2;
  wire I_3;
  wire I_1;
  wire s3;
  assign I_0 = I[0];
  assign I_1 = I[1];
  assign I_2 = I[2];
  assign I_3 = I[3];
  assign s0 = ~ I_3;
  assign s3 = ~ I_2;
  assign s2 = ~ I_1;
  assign s1 = ~ I_0;
  assign O[0] = ~ (~ (I_0 & s3 & s0) & ~ (s1 & I_1 & I_2) & ~ (s1 & I_3));
  assign O[1] = ~ (~ (I_0 & I_1) & ~ (s1 & s2 & I_3) & ~ (I_1 & s3 & s0));
  assign O[2] = ~ (~ (s1 & s2 & I_2) & ~ (I_0 & s3 & I_3) & ~ (I_1 & s3 & I_3));
  assign O[3] = ~ (~ (I_0 & I_2 & s0) & ~ (s1 & s2 & I_3) & ~ (I_1 & I_2 & s0) & ~ (s3 & I_3));
endmodule

module bin2bcdpiped (
  input [15:0] I,
  input clock,
  output [19:0] O
);
  wire [19:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [19:0] s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [19:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  wire [3:0] s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire [3:0] s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [19:0] s27;
  wire [19:0] s28;
  wire [3:0] s29;
  wire [3:0] s30;
  wire [3:0] s31;
  wire [3:0] s32;
  wire [3:0] s33;
  wire [3:0] s34;
  wire [3:0] s35;
  wire [3:0] s36;
  wire [19:0] s37;
  wire [3:0] s38;
  wire [3:0] s39;
  wire [3:0] s40;
  wire [3:0] s41;
  wire [3:0] s42;
  wire [3:0] s43;
  wire [19:0] s44;
  wire [3:0] s45;
  wire [3:0] s46;
  wire [3:0] s47;
  wire [3:0] s48;
  wire [3:0] s49;
  wire [3:0] s50;
  wire [19:0] s51;
  wire [19:0] s52;
  wire [19:0] s53;
  wire [3:0] s54;
  wire [3:0] s55;
  wire [3:0] s56;
  wire [3:0] s57;
  wire [3:0] s58;
  wire [3:0] s59;
  wire [19:0] s60;
  wire [3:0] s61;
  wire [3:0] s62;
  wire [3:0] s63;
  wire [3:0] s64;
  wire [19:0] s65;
  wire [3:0] s66;
  wire [3:0] s67;
  wire [3:0] s68;
  wire [3:0] s69;
  wire [19:0] s70;
  wire [19:0] s71;
  wire [3:0] s72;
  wire [3:0] s73;
  wire [3:0] s74;
  wire [3:0] s75;
  wire [19:0] s76;
  wire [3:0] s77;
  wire [3:0] s78;
  wire [19:0] s79;
  wire [3:0] s80;
  wire [3:0] s81;
  wire [19:0] s82;
  wire [3:0] s83;
  wire [3:0] s84;
  assign s52[15:0] = I;
  assign s52[19:16] = 4'b0;
  assign s83 = s52[16:13];
  gt4add3 gt4add3_i0 (
    .I( s83 ),
    .O( s84 )
  );
  assign s79[12:0] = s52[12:0];
  assign s79[16:13] = s84;
  assign s79[19:17] = s52[19:17];
  assign s80 = s79[15:12];
  gt4add3 gt4add3_i1 (
    .I( s80 ),
    .O( s81 )
  );
  assign s82[11:0] = s79[11:0];
  assign s82[15:12] = s81;
  assign s82[19:16] = s79[19:16];
  DIG_Register_BUS #(
    .Bits(20)
  )
  DIG_Register_BUS_i2 (
    .D( s82 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s76 )
  );
  assign s77 = s76[14:11];
  gt4add3 gt4add3_i3 (
    .I( s77 ),
    .O( s78 )
  );
  assign s71[10:0] = s76[10:0];
  assign s71[14:11] = s78;
  assign s71[19:15] = s76[19:15];
  assign s72 = s71[13:10];
  assign s73 = s71[17:14];
  gt4add3 gt4add3_i4 (
    .I( s72 ),
    .O( s74 )
  );
  gt4add3 gt4add3_i5 (
    .I( s73 ),
    .O( s75 )
  );
  assign s65[9:0] = s71[9:0];
  assign s65[13:10] = s74;
  assign s65[17:14] = s75;
  assign s65[19:18] = s71[19:18];
  assign s66 = s65[12:9];
  assign s67 = s65[16:13];
  gt4add3 gt4add3_i6 (
    .I( s67 ),
    .O( s69 )
  );
  gt4add3 gt4add3_i7 (
    .I( s66 ),
    .O( s68 )
  );
  assign s70[8:0] = s65[8:0];
  assign s70[12:9] = s68;
  assign s70[16:13] = s69;
  assign s70[19:17] = s65[19:17];
  DIG_Register_BUS #(
    .Bits(20)
  )
  DIG_Register_BUS_i8 (
    .D( s70 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s60 )
  );
  assign s61 = s60[11:8];
  assign s62 = s60[15:12];
  gt4add3 gt4add3_i9 (
    .I( s62 ),
    .O( s64 )
  );
  gt4add3 gt4add3_i10 (
    .I( s61 ),
    .O( s63 )
  );
  assign s53[7:0] = s60[7:0];
  assign s53[11:8] = s63;
  assign s53[15:12] = s64;
  assign s53[19:16] = s60[19:16];
  assign s54 = s53[10:7];
  assign s55 = s53[14:11];
  assign s56 = s53[18:15];
  gt4add3 gt4add3_i11 (
    .I( s55 ),
    .O( s58 )
  );
  gt4add3 gt4add3_i12 (
    .I( s54 ),
    .O( s57 )
  );
  gt4add3 gt4add3_i13 (
    .I( s56 ),
    .O( s59 )
  );
  assign s44[6:0] = s53[6:0];
  assign s44[10:7] = s57;
  assign s44[14:11] = s58;
  assign s44[18:15] = s59;
  assign s44[19] = s53[19];
  assign s45 = s44[9:6];
  assign s46 = s44[13:10];
  assign s47 = s44[17:14];
  gt4add3 gt4add3_i14 (
    .I( s47 ),
    .O( s50 )
  );
  gt4add3 gt4add3_i15 (
    .I( s46 ),
    .O( s49 )
  );
  gt4add3 gt4add3_i16 (
    .I( s45 ),
    .O( s48 )
  );
  assign s51[5:0] = s44[5:0];
  assign s51[9:6] = s48;
  assign s51[13:10] = s49;
  assign s51[17:14] = s50;
  assign s51[19:18] = s44[19:18];
  DIG_Register_BUS #(
    .Bits(20)
  )
  DIG_Register_BUS_i17 (
    .D( s51 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s37 )
  );
  assign s38 = s37[8:5];
  assign s39 = s37[12:9];
  assign s40 = s37[16:13];
  gt4add3 gt4add3_i18 (
    .I( s40 ),
    .O( s43 )
  );
  gt4add3 gt4add3_i19 (
    .I( s39 ),
    .O( s42 )
  );
  gt4add3 gt4add3_i20 (
    .I( s38 ),
    .O( s41 )
  );
  assign s28[4:0] = s37[4:0];
  assign s28[8:5] = s41;
  assign s28[12:9] = s42;
  assign s28[16:13] = s43;
  assign s28[19:17] = s37[19:17];
  assign s29 = s28[7:4];
  assign s30 = s28[11:8];
  assign s31 = s28[15:12];
  assign s32 = s28[19:16];
  gt4add3 gt4add3_i21 (
    .I( s31 ),
    .O( s35 )
  );
  gt4add3 gt4add3_i22 (
    .I( s30 ),
    .O( s34 )
  );
  gt4add3 gt4add3_i23 (
    .I( s29 ),
    .O( s33 )
  );
  gt4add3 gt4add3_i24 (
    .I( s32 ),
    .O( s36 )
  );
  assign s18[3:0] = s28[3:0];
  assign s18[7:4] = s33;
  assign s18[11:8] = s34;
  assign s18[15:12] = s35;
  assign s18[19:16] = s36;
  assign s19 = s18[6:3];
  assign s20 = s18[10:7];
  assign s21 = s18[14:11];
  assign s22 = s18[18:15];
  gt4add3 gt4add3_i25 (
    .I( s22 ),
    .O( s26 )
  );
  gt4add3 gt4add3_i26 (
    .I( s21 ),
    .O( s25 )
  );
  gt4add3 gt4add3_i27 (
    .I( s20 ),
    .O( s24 )
  );
  gt4add3 gt4add3_i28 (
    .I( s19 ),
    .O( s23 )
  );
  assign s27[2:0] = s18[2:0];
  assign s27[6:3] = s23;
  assign s27[10:7] = s24;
  assign s27[14:11] = s25;
  assign s27[18:15] = s26;
  assign s27[19] = s18[19];
  DIG_Register_BUS #(
    .Bits(20)
  )
  DIG_Register_BUS_i29 (
    .D( s27 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( s9 )
  );
  assign s10 = s9[5:2];
  assign s11 = s9[9:6];
  assign s12 = s9[13:10];
  assign s13 = s9[17:14];
  gt4add3 gt4add3_i30 (
    .I( s13 ),
    .O( s17 )
  );
  gt4add3 gt4add3_i31 (
    .I( s12 ),
    .O( s16 )
  );
  gt4add3 gt4add3_i32 (
    .I( s11 ),
    .O( s15 )
  );
  gt4add3 gt4add3_i33 (
    .I( s10 ),
    .O( s14 )
  );
  assign s0[1:0] = s9[1:0];
  assign s0[5:2] = s14;
  assign s0[9:6] = s15;
  assign s0[13:10] = s16;
  assign s0[17:14] = s17;
  assign s0[19:18] = s9[19:18];
  assign s1 = s0[4:1];
  assign s2 = s0[8:5];
  assign s3 = s0[12:9];
  assign s4 = s0[16:13];
  gt4add3 gt4add3_i34 (
    .I( s4 ),
    .O( s8 )
  );
  gt4add3 gt4add3_i35 (
    .I( s3 ),
    .O( s7 )
  );
  gt4add3 gt4add3_i36 (
    .I( s2 ),
    .O( s6 )
  );
  gt4add3 gt4add3_i37 (
    .I( s1 ),
    .O( s5 )
  );
  assign O[0] = s0[0];
  assign O[4:1] = s5;
  assign O[8:5] = s6;
  assign O[12:9] = s7;
  assign O[16:13] = s8;
  assign O[19:17] = s0[19:17];
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module digit2ascii (
  input [3:0] D,
  output [6:0] A
);
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( D ),
    .in_0( 7'b110000 ),
    .in_1( 7'b110001 ),
    .in_2( 7'b110010 ),
    .in_3( 7'b110011 ),
    .in_4( 7'b110100 ),
    .in_5( 7'b110101 ),
    .in_6( 7'b110110 ),
    .in_7( 7'b110111 ),
    .in_8( 7'b111000 ),
    .in_9( 7'b111001 ),
    .in_10( 7'b1000001 ),
    .in_11( 7'b1000010 ),
    .in_12( 7'b1000011 ),
    .in_13( 7'b1000100 ),
    .in_14( 7'b1000101 ),
    .in_15( 7'b1000110 ),
    .out( A )
  );
endmodule

module digit2asciiskip (
  input [3:0] i,
  input s_i,
  output [6:0] a,
  output s_o
);
  wire [6:0] s0;
  wire s_o_temp;
  digit2ascii digit2ascii_i0 (
    .D( i ),
    .A( s0 )
  );
  assign s_o_temp = (s_i | i[0] | i[1] | i[2] | i[3]);
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i1 (
    .sel( s_o_temp ),
    .in_0( 7'b0 ),
    .in_1( s0 ),
    .out( a )
  );
  assign s_o = s_o_temp;
endmodule

module bcd2ascii (
  input [19:0] N,
  input s,
  output [6:0] d5,
  output [6:0] d4,
  output [6:0] d3,
  output [6:0] d2,
  output [6:0] d1,
  output [6:0] d0
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire s5;
  wire s6;
  wire s7;
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i0 (
    .sel( s ),
    .in_0( 7'b0 ),
    .in_1( 7'b101101 ),
    .out( d5 )
  );
  assign s0 = N[3:0];
  assign s1 = N[7:4];
  assign s2 = N[11:8];
  assign s3 = N[15:12];
  assign s4 = N[19:16];
  digit2asciiskip digit2asciiskip_i1 (
    .i( s4 ),
    .s_i( 1'b0 ),
    .a( d4 ),
    .s_o( s5 )
  );
  digit2ascii digit2ascii_i2 (
    .D( s0 ),
    .A( d0 )
  );
  digit2asciiskip digit2asciiskip_i3 (
    .i( s3 ),
    .s_i( s5 ),
    .a( d3 ),
    .s_o( s6 )
  );
  digit2asciiskip digit2asciiskip_i4 (
    .i( s2 ),
    .s_i( s6 ),
    .a( d2 ),
    .s_o( s7 )
  );
  digit2asciiskip digit2asciiskip_i5 (
    .i( s1 ),
    .s_i( s7 ),
    .a( d1 )
  );
endmodule

module num2ascii (
  input [15:0] num,
  input s,
  input hex,
  input clock,
  input [2:0] digit,
  output [6:0] char
);
  wire [19:0] s0;
  wire s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [6:0] s4;
  wire [6:0] s5;
  wire [6:0] s6;
  wire [6:0] s7;
  wire [15:0] s8;
  wire [19:0] s9;
  wire [19:0] s10;
  unsign unsign_i0 (
    .i( num ),
    .sgn( s ),
    .o( s8 ),
    .s( s1 )
  );
  assign s9[15:0] = s8;
  assign s9[19:16] = 4'b0;
  bin2bcdpiped bin2bcdpiped_i1 (
    .I( s8 ),
    .clock( clock ),
    .O( s10 )
  );
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i2 (
    .sel( hex ),
    .in_0( s10 ),
    .in_1( s9 ),
    .out( s0 )
  );
  bcd2ascii bcd2ascii_i3 (
    .N( s0 ),
    .s( s1 ),
    .d5( s2 ),
    .d4( s3 ),
    .d3( s4 ),
    .d2( s5 ),
    .d1( s6 ),
    .d0( s7 )
  );
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i4 (
    .sel( digit ),
    .in_0( s2 ),
    .in_1( s3 ),
    .in_2( s4 ),
    .in_3( s5 ),
    .in_4( s6 ),
    .in_5( s7 ),
    .in_6( 7'b0 ),
    .in_7( 7'b0 ),
    .out( char )
  );
endmodule

module Mux_32x1_NBits #(
    parameter Bits = 2
)
(
    input [4:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    input [(Bits - 1):0] in_16,
    input [(Bits - 1):0] in_17,
    input [(Bits - 1):0] in_18,
    input [(Bits - 1):0] in_19,
    input [(Bits - 1):0] in_20,
    input [(Bits - 1):0] in_21,
    input [(Bits - 1):0] in_22,
    input [(Bits - 1):0] in_23,
    input [(Bits - 1):0] in_24,
    input [(Bits - 1):0] in_25,
    input [(Bits - 1):0] in_26,
    input [(Bits - 1):0] in_27,
    input [(Bits - 1):0] in_28,
    input [(Bits - 1):0] in_29,
    input [(Bits - 1):0] in_30,
    input [(Bits - 1):0] in_31,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            5'h0: out = in_0;
            5'h1: out = in_1;
            5'h2: out = in_2;
            5'h3: out = in_3;
            5'h4: out = in_4;
            5'h5: out = in_5;
            5'h6: out = in_6;
            5'h7: out = in_7;
            5'h8: out = in_8;
            5'h9: out = in_9;
            5'ha: out = in_10;
            5'hb: out = in_11;
            5'hc: out = in_12;
            5'hd: out = in_13;
            5'he: out = in_14;
            5'hf: out = in_15;
            5'h10: out = in_16;
            5'h11: out = in_17;
            5'h12: out = in_18;
            5'h13: out = in_19;
            5'h14: out = in_20;
            5'h15: out = in_21;
            5'h16: out = in_22;
            5'h17: out = in_23;
            5'h18: out = in_24;
            5'h19: out = in_25;
            5'h1a: out = in_26;
            5'h1b: out = in_27;
            5'h1c: out = in_28;
            5'h1d: out = in_29;
            5'h1e: out = in_30;
            5'h1f: out = in_31;
            default:
                out = 'h0;
        endcase
    end
endmodule


module op2ascii (
  input [15:0] I,
  output [6:0] L0,
  output [6:0] L1,
  output [6:0] L2,
  output [6:0] L3,
  output [6:0] L4,
  output [6:0] L5
);
  wire [4:0] s0;
  assign s0 = I[4:0];
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i0 (
    .sel( s0 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b1010011 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b100000 ),
    .in_19( 7'b100000 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b100000 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b100000 ),
    .in_31( 7'b100000 ),
    .out( L0 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i1 (
    .sel( s0 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1000101 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b1010011 ),
    .in_14( 7'b1001100 ),
    .in_15( 7'b1010100 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b100000 ),
    .in_19( 7'b100000 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b1001001 ),
    .in_27( 7'b1001001 ),
    .in_28( 7'b1001001 ),
    .in_29( 7'b1001001 ),
    .in_30( 7'b1001001 ),
    .in_31( 7'b1001001 ),
    .out( L1 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i2 (
    .sel( s0 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1001000 ),
    .in_4( 7'b1001010 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b1001101 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b1001010 ),
    .in_10( 7'b1000011 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b1001100 ),
    .in_13( 7'b1010100 ),
    .in_14( 7'b1001111 ),
    .in_15( 7'b1001111 ),
    .in_16( 7'b100000 ),
    .in_17( 7'b100000 ),
    .in_18( 7'b1000001 ),
    .in_19( 7'b1010011 ),
    .in_20( 7'b100000 ),
    .in_21( 7'b100000 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b100000 ),
    .in_24( 7'b100000 ),
    .in_25( 7'b100000 ),
    .in_26( 7'b1000110 ),
    .in_27( 7'b1000110 ),
    .in_28( 7'b1000110 ),
    .in_29( 7'b1000110 ),
    .in_30( 7'b1000110 ),
    .in_31( 7'b1000110 ),
    .out( L2 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i3 (
    .sel( s0 ),
    .in_0( 7'b1001110 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1000001 ),
    .in_4( 7'b1010101 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b1001111 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b1010101 ),
    .in_10( 7'b1000001 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b1001111 ),
    .in_13( 7'b1001111 ),
    .in_14( 7'b1000001 ),
    .in_15( 7'b1010010 ),
    .in_16( 7'b1000001 ),
    .in_17( 7'b1010011 ),
    .in_18( 7'b1000100 ),
    .in_19( 7'b1010101 ),
    .in_20( 7'b1011000 ),
    .in_21( 7'b1000001 ),
    .in_22( 7'b100000 ),
    .in_23( 7'b1010011 ),
    .in_24( 7'b1010011 ),
    .in_25( 7'b1000001 ),
    .in_26( 7'b100000 ),
    .in_27( 7'b100000 ),
    .in_28( 7'b100000 ),
    .in_29( 7'b100000 ),
    .in_30( 7'b100000 ),
    .in_31( 7'b100000 ),
    .out( L3 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i4 (
    .sel( s0 ),
    .in_0( 7'b1001111 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1001111 ),
    .in_3( 7'b1001100 ),
    .in_4( 7'b1001101 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b1010110 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b1001101 ),
    .in_10( 7'b1001100 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b1000001 ),
    .in_13( 7'b1010010 ),
    .in_14( 7'b1000100 ),
    .in_15( 7'b1000101 ),
    .in_16( 7'b1000100 ),
    .in_17( 7'b1010101 ),
    .in_18( 7'b1000100 ),
    .in_19( 7'b1000010 ),
    .in_20( 7'b1001111 ),
    .in_21( 7'b1001110 ),
    .in_22( 7'b1001111 ),
    .in_23( 7'b1001000 ),
    .in_24( 7'b1001000 ),
    .in_25( 7'b1010011 ),
    .in_26( 7'b1000101 ),
    .in_27( 7'b1001110 ),
    .in_28( 7'b1001100 ),
    .in_29( 7'b1000111 ),
    .in_30( 7'b1001100 ),
    .in_31( 7'b1001000 ),
    .out( L4 )
  );
  Mux_32x1_NBits #(
    .Bits(7)
  )
  Mux_32x1_NBits_i5 (
    .sel( s0 ),
    .in_0( 7'b1010000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1010100 ),
    .in_4( 7'b1010000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b1000101 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b1010000 ),
    .in_10( 7'b1001100 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b1000100 ),
    .in_13( 7'b1000101 ),
    .in_14( 7'b1000010 ),
    .in_15( 7'b1000010 ),
    .in_16( 7'b1000100 ),
    .in_17( 7'b1000010 ),
    .in_18( 7'b1000011 ),
    .in_19( 7'b1000011 ),
    .in_20( 7'b1010010 ),
    .in_21( 7'b1000100 ),
    .in_22( 7'b1010010 ),
    .in_23( 7'b1001100 ),
    .in_24( 7'b1010010 ),
    .in_25( 7'b1010010 ),
    .in_26( 7'b1010001 ),
    .in_27( 7'b1000101 ),
    .in_28( 7'b1010100 ),
    .in_29( 7'b1000101 ),
    .in_30( 7'b1001111 ),
    .in_31( 7'b1010011 ),
    .out( L5 )
  );
endmodule

module vga_opdisp (
  input [15:0] fullop,
  input [2:0] digit,
  output [6:0] char
);
  wire [6:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [6:0] s4;
  wire [6:0] s5;
  op2ascii op2ascii_i0 (
    .I( fullop ),
    .L0( s0 ),
    .L1( s1 ),
    .L2( s2 ),
    .L3( s3 ),
    .L4( s4 ),
    .L5( s5 )
  );
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i1 (
    .sel( digit ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( s0 ),
    .in_3( s1 ),
    .in_4( s2 ),
    .in_5( s3 ),
    .in_6( s4 ),
    .in_7( s5 ),
    .out( char )
  );
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module reg2ascii (
  input [3:0] R,
  input J,
  input E,
  output [6:0] D_0,
  output [6:0] D_1,
  output [6:0] D_2
);
  wire [6:0] s0;
  wire [1:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( R ),
    .in_0( 7'b110000 ),
    .in_1( 7'b110001 ),
    .in_2( 7'b110010 ),
    .in_3( 7'b110011 ),
    .in_4( 7'b110100 ),
    .in_5( 7'b110101 ),
    .in_6( 7'b110110 ),
    .in_7( 7'b110111 ),
    .in_8( 7'b111000 ),
    .in_9( 7'b111001 ),
    .in_10( 7'b110000 ),
    .in_11( 7'b110001 ),
    .in_12( 7'b110010 ),
    .in_13( 7'b110011 ),
    .in_14( 7'b110100 ),
    .in_15( 7'b110101 ),
    .out( s0 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i1 (
    .sel( R ),
    .in_0( 7'b1010010 ),
    .in_1( 7'b1010010 ),
    .in_2( 7'b1010010 ),
    .in_3( 7'b1010010 ),
    .in_4( 7'b1010010 ),
    .in_5( 7'b1010010 ),
    .in_6( 7'b1010010 ),
    .in_7( 7'b1010010 ),
    .in_8( 7'b1010010 ),
    .in_9( 7'b1010010 ),
    .in_10( 7'b110001 ),
    .in_11( 7'b110001 ),
    .in_12( 7'b110001 ),
    .in_13( 7'b110001 ),
    .in_14( 7'b110001 ),
    .in_15( 7'b110001 ),
    .out( s2 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i2 (
    .sel( R ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b1010010 ),
    .in_11( 7'b1010010 ),
    .in_12( 7'b1010010 ),
    .in_13( 7'b1010010 ),
    .in_14( 7'b1010010 ),
    .in_15( 7'b1010010 ),
    .out( s3 )
  );
  assign s1[0] = J;
  assign s1[1] = E;
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i3 (
    .sel( s1 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( s2 ),
    .in_3( 7'b1010000 ),
    .out( D_1 )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i4 (
    .sel( s1 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( s0 ),
    .in_3( 7'b1000011 ),
    .out( D_2 )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i5 (
    .sel( s1 ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( s3 ),
    .in_3( 7'b100000 ),
    .out( D_0 )
  );
endmodule

module vga_regdisp (
  input [15:0] \reg ,
  input [2:0] digit,
  output [6:0] char
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire [6:0] s3;
  wire [6:0] s4;
  wire [6:0] s5;
  wire [1:0] s6;
  assign s0 = \reg [3:0];
  assign s1 = \reg [4];
  assign s2 = \reg [5];
  assign s6 = digit[1:0];
  reg2ascii reg2ascii_i0 (
    .R( s0 ),
    .J( s1 ),
    .E( s2 ),
    .D_0( s3 ),
    .D_1( s4 ),
    .D_2( s5 )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i1 (
    .sel( s6 ),
    .in_0( s3 ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( 7'b100000 ),
    .out( char )
  );
endmodule

module Mux_16x1
(
    input [3:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    input in_8,
    input in_9,
    input in_10,
    input in_11,
    input in_12,
    input in_13,
    input in_14,
    input in_15,
    output reg out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module aluop2ascii (
  input [3:0] I,
  output [6:0] L0,
  output [6:0] L1,
  output [6:0] L2,
  output [6:0] L3,
  output L_v,
  output R_v,
  output res_v
);
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i0 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L0 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i1 (
    .sel( I ),
    .in_0( 7'b101011 ),
    .in_1( 7'b101101 ),
    .in_2( 7'b111110 ),
    .in_3( 7'b111100 ),
    .in_4( 7'b111110 ),
    .in_5( 7'b1011110 ),
    .in_6( 7'b100110 ),
    .in_7( 7'b100001 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L1 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i2 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b111110 ),
    .in_3( 7'b111100 ),
    .in_4( 7'b111110 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L2 )
  );
  Mux_16x1_NBits #(
    .Bits(7)
  )
  Mux_16x1_NBits_i3 (
    .sel( I ),
    .in_0( 7'b100000 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .in_8( 7'b100000 ),
    .in_9( 7'b100000 ),
    .in_10( 7'b100000 ),
    .in_11( 7'b100000 ),
    .in_12( 7'b100000 ),
    .in_13( 7'b100000 ),
    .in_14( 7'b100000 ),
    .in_15( 7'b100000 ),
    .out( L3 )
  );
  Mux_16x1 Mux_16x1_i4 (
    .sel( I ),
    .in_0( 1'b1 ),
    .in_1( 1'b1 ),
    .in_2( 1'b1 ),
    .in_3( 1'b1 ),
    .in_4( 1'b1 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( L_v )
  );
  Mux_16x1 Mux_16x1_i5 (
    .sel( I ),
    .in_0( 1'b1 ),
    .in_1( 1'b1 ),
    .in_2( 1'b1 ),
    .in_3( 1'b1 ),
    .in_4( 1'b1 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( R_v )
  );
  Mux_16x1 Mux_16x1_i6 (
    .sel( I ),
    .in_0( 1'b1 ),
    .in_1( 1'b1 ),
    .in_2( 1'b1 ),
    .in_3( 1'b1 ),
    .in_4( 1'b1 ),
    .in_5( 1'b1 ),
    .in_6( 1'b1 ),
    .in_7( 1'b1 ),
    .in_8( 1'b0 ),
    .in_9( 1'b0 ),
    .in_10( 1'b0 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( res_v )
  );
endmodule

module vga_aluopdisp (
  input [15:0] aluop,
  input [2:0] digit,
  output [6:0] char
);
  wire [1:0] s0;
  wire [6:0] s1;
  wire [6:0] s2;
  wire [6:0] s3;
  wire [6:0] s4;
  wire [3:0] s5;
  assign s5[2:0] = aluop[7:5];
  assign s5[3] = 1'b0;
  assign s0 = digit[1:0];
  aluop2ascii aluop2ascii_i0 (
    .I( s5 ),
    .L0( s1 ),
    .L1( s2 ),
    .L2( s3 ),
    .L3( s4 )
  );
  Mux_4x1_NBits #(
    .Bits(7)
  )
  Mux_4x1_NBits_i1 (
    .sel( s0 ),
    .in_0( s1 ),
    .in_1( s2 ),
    .in_2( s3 ),
    .in_3( s4 ),
    .out( char )
  );
endmodule
module DIG_ROM_256X16_code (
    input [7:0] A,
    input sel,
    output reg [15:0] D
);
    reg [15:0] my_rom [0:118];

    always @ (*) begin
        if (~sel)
            D = 16'hz;
        else if (A > 8'h76)
            D = 16'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 16'h6a;
        my_rom[1] = 16'h0;
        my_rom[2] = 16'h0;
        my_rom[3] = 16'h0;
        my_rom[4] = 16'h1;
        my_rom[5] = 16'h9;
        my_rom[6] = 16'h11;
        my_rom[7] = 16'h19;
        my_rom[8] = 16'h21;
        my_rom[9] = 16'h29;
        my_rom[10] = 16'h0;
        my_rom[11] = 16'h0;
        my_rom[12] = 16'h802;
        my_rom[13] = 16'h3;
        my_rom[14] = 16'h27;
        my_rom[15] = 16'h6;
        my_rom[16] = 16'h10c;
        my_rom[17] = 16'ha;
        my_rom[18] = 16'h26;
        my_rom[19] = 16'h14c;
        my_rom[20] = 16'ha;
        my_rom[21] = 16'h46;
        my_rom[22] = 16'h18c;
        my_rom[23] = 16'ha;
        my_rom[24] = 16'h66;
        my_rom[25] = 16'h1cc;
        my_rom[26] = 16'ha;
        my_rom[27] = 16'he;
        my_rom[28] = 16'h20c;
        my_rom[29] = 16'ha;
        my_rom[30] = 16'h2e;
        my_rom[31] = 16'h24c;
        my_rom[32] = 16'ha;
        my_rom[33] = 16'h4e;
        my_rom[34] = 16'h28c;
        my_rom[35] = 16'ha;
        my_rom[36] = 16'h6e;
        my_rom[37] = 16'h2cc;
        my_rom[38] = 16'ha;
        my_rom[39] = 16'h16;
        my_rom[40] = 16'h30c;
        my_rom[41] = 16'ha;
        my_rom[42] = 16'h36;
        my_rom[43] = 16'h34c;
        my_rom[44] = 16'ha;
        my_rom[45] = 16'h56;
        my_rom[46] = 16'h38c;
        my_rom[47] = 16'ha;
        my_rom[48] = 16'h76;
        my_rom[49] = 16'h3cc;
        my_rom[50] = 16'ha;
        my_rom[51] = 16'h1e;
        my_rom[52] = 16'h40c;
        my_rom[53] = 16'ha;
        my_rom[54] = 16'h3e;
        my_rom[55] = 16'h44c;
        my_rom[56] = 16'ha;
        my_rom[57] = 16'h5e;
        my_rom[58] = 16'h48c;
        my_rom[59] = 16'ha;
        my_rom[60] = 16'h7e;
        my_rom[61] = 16'h4cc;
        my_rom[62] = 16'ha;
        my_rom[63] = 16'hb6;
        my_rom[64] = 16'h6cc;
        my_rom[65] = 16'ha;
        my_rom[66] = 16'ha6;
        my_rom[67] = 16'h84c;
        my_rom[68] = 16'ha;
        my_rom[69] = 16'h96;
        my_rom[70] = 16'h88c;
        my_rom[71] = 16'ha;
        my_rom[72] = 16'h9e;
        my_rom[73] = 16'h8cc;
        my_rom[74] = 16'ha;
        my_rom[75] = 16'hbe;
        my_rom[76] = 16'ha0c;
        my_rom[77] = 16'ha;
        my_rom[78] = 16'h86;
        my_rom[79] = 16'h37;
        my_rom[80] = 16'hb;
        my_rom[81] = 16'h60c;
        my_rom[82] = 16'h1;
        my_rom[83] = 16'h9;
        my_rom[84] = 16'h11;
        my_rom[85] = 16'h19;
        my_rom[86] = 16'h21;
        my_rom[87] = 16'h29;
        my_rom[88] = 16'h31;
        my_rom[89] = 16'h39;
        my_rom[90] = 16'h17;
        my_rom[91] = 16'h13;
        my_rom[92] = 16'hce;
        my_rom[93] = 16'h6a4;
        my_rom[94] = 16'h1;
        my_rom[95] = 16'h9;
        my_rom[96] = 16'h11;
        my_rom[97] = 16'hc6;
        my_rom[98] = 16'h664;
        my_rom[99] = 16'h1;
        my_rom[100] = 16'h9;
        my_rom[101] = 16'h11;
        my_rom[102] = 16'h80c;
        my_rom[103] = 16'h1;
        my_rom[104] = 16'h9;
        my_rom[105] = 16'h11;
        my_rom[106] = 16'h8e;
        my_rom[107] = 16'h1b;
        my_rom[108] = 16'h1f;
        my_rom[109] = 16'h8b4;
        my_rom[110] = 16'h9;
        my_rom[111] = 16'h11;
        my_rom[112] = 16'h834;
        my_rom[113] = 16'h3b;
        my_rom[114] = 16'h17;
        my_rom[115] = 16'h1;
        my_rom[116] = 16'h884;
        my_rom[117] = 16'h1;
        my_rom[118] = 16'h6a;
    end
endmodule


module Decoder3 (
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel
);
    assign out_0 = (sel == 3'h0)? 1'b1 : 1'b0;
    assign out_1 = (sel == 3'h1)? 1'b1 : 1'b0;
    assign out_2 = (sel == 3'h2)? 1'b1 : 1'b0;
    assign out_3 = (sel == 3'h3)? 1'b1 : 1'b0;
    assign out_4 = (sel == 3'h4)? 1'b1 : 1'b0;
    assign out_5 = (sel == 3'h5)? 1'b1 : 1'b0;
    assign out_6 = (sel == 3'h6)? 1'b1 : 1'b0;
    assign out_7 = (sel == 3'h7)? 1'b1 : 1'b0;
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module vga_debugrender (
  input [15:0] db_D,
  input clock,
  input \signed ,
  input hex,
  output [8:0] fb_A,
  output [6:0] fb_D,
  output fb_wen,
  output [3:0] colour,
  output [4:0] db_A
);
  wire [7:0] s0;
  wire call;
  wire [7:0] s1;
  wire [15:0] s2;
  wire [2:0] s3;
  wire [12:0] s4;
  wire [8:0] s5;
  wire pos;
  wire [8:0] s6;
  wire [4:0] s7;
  wire dba;
  wire nop;
  wire plot;
  wire typ;
  wire colr;
  wire s8;
  wire [7:0] s9;
  wire ret;
  wire [7:0] s10;
  wire [7:0] s11;
  wire [8:0] s12;
  wire [8:0] s13;
  wire [2:0] offset;
  wire write;
  wire [6:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [2:0] s17;
  wire [6:0] s18;
  wire [6:0] s19;
  wire [6:0] s20;
  wire [6:0] s21;
  wire [6:0] s22;
  wire [15:0] s23;
  wire [2:0] s24;
  wire [2:0] s25;
  wire s26;
  num2ascii num2ascii_i0 (
    .num( s23 ),
    .s( \signed  ),
    .hex( hex ),
    .clock( clock ),
    .digit( offset ),
    .char( s18 )
  );
  // value
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( db_D ),
    .C( clock ),
    .en( s26 ),
    .Q( s23 )
  );
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i2 (
    .sel( s17 ),
    .in_0( s18 ),
    .in_1( s19 ),
    .in_2( s20 ),
    .in_3( s21 ),
    .in_4( 7'b0 ),
    .in_5( 7'b0 ),
    .in_6( 7'b0 ),
    .in_7( s22 ),
    .out( s14 )
  );
  vga_opdisp vga_opdisp_i3 (
    .fullop( s23 ),
    .digit( offset ),
    .char( s19 )
  );
  vga_regdisp vga_regdisp_i4 (
    .\reg ( s23 ),
    .digit( offset ),
    .char( s20 )
  );
  vga_aluopdisp vga_aluopdisp_i5 (
    .aluop( s23 ),
    .digit( offset ),
    .char( s21 )
  );
  // char
  DIG_Register_BUS #(
    .Bits(7)
  )
  DIG_Register_BUS_i6 (
    .D( s14 ),
    .C( clock ),
    .en( write ),
    .Q( fb_D )
  );
  // DispPC
  DIG_CounterPreset #(
    .Bits(8),
    .maxValue(0)
  )
  DIG_CounterPreset_i7 (
    .en( 1'b1 ),
    .C( clock ),
    .dir( 1'b0 ),
    .in( s0 ),
    .ld( call ),
    .clr( 1'b0 ),
    .out( s1 )
  );
  // code
  DIG_ROM_256X16_code DIG_ROM_256X16_code_i8 (
    .A( s1 ),
    .sel( 1'b1 ),
    .D( s2 )
  );
  // pos
  DIG_Register_BUS #(
    .Bits(9)
  )
  DIG_Register_BUS_i9 (
    .D( s5 ),
    .C( clock ),
    .en( pos ),
    .Q( s6 )
  );
  // db_A
  DIG_Register_BUS #(
    .Bits(5)
  )
  DIG_Register_BUS_i10 (
    .D( s7 ),
    .C( clock ),
    .en( dba ),
    .Q( db_A )
  );
  Decoder3 Decoder3_i11 (
    .sel( s3 ),
    .out_0( nop ),
    .out_1( plot ),
    .out_2( call ),
    .out_3( typ ),
    .out_4( pos ),
    .out_6( dba ),
    .out_7( colr )
  );
  // RA
  DIG_Register_BUS #(
    .Bits(8)
  )
  DIG_Register_BUS_i12 (
    .D( s1 ),
    .C( clock ),
    .en( s8 ),
    .Q( s9 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i13 (
    .sel( ret ),
    .in_0( s10 ),
    .in_1( s11 ),
    .out( s0 )
  );
  DIG_Add #(
    .Bits(9)
  )
  DIG_Add_i14 (
    .a( s6 ),
    .b( s12 ),
    .c_i( 1'b0 ),
    .s( s13 )
  );
  assign s12[2:0] = offset;
  assign s12[8:3] = 6'b0;
  DIG_Register_BUS #(
    .Bits(9)
  )
  DIG_Register_BUS_i15 (
    .D( s13 ),
    .C( clock ),
    .en( write ),
    .Q( fb_A )
  );
  // wen
  DIG_Register DIG_Register_i16 (
    .D( write ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( fb_wen )
  );
  // colour
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i17 (
    .D( s15 ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( colour )
  );
  // colour
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i18 (
    .D( s16 ),
    .C( clock ),
    .en( colr ),
    .Q( s15 )
  );
  // Offset
  DIG_Register_BUS #(
    .Bits(3)
  )
  DIG_Register_BUS_i19 (
    .D( s24 ),
    .C( clock ),
    .en( plot ),
    .Q( offset )
  );
  // type
  DIG_Register_BUS #(
    .Bits(3)
  )
  DIG_Register_BUS_i20 (
    .D( s25 ),
    .C( clock ),
    .en( typ ),
    .Q( s17 )
  );
  // +1
  DIG_Add #(
    .Bits(8)
  )
  DIG_Add_i21 (
    .a( s9 ),
    .b( 8'b0 ),
    .c_i( 1'b1 ),
    .s( s11 )
  );
  // plot
  DIG_Register DIG_Register_i22 (
    .D( plot ),
    .C( clock ),
    .en( 1'b1 ),
    .Q( write )
  );
  assign s8 = (call & ~ ret);
  Mux_8x1_NBits #(
    .Bits(7)
  )
  Mux_8x1_NBits_i23 (
    .sel( offset ),
    .in_0( 7'b111101 ),
    .in_1( 7'b100000 ),
    .in_2( 7'b100000 ),
    .in_3( 7'b100000 ),
    .in_4( 7'b100000 ),
    .in_5( 7'b100000 ),
    .in_6( 7'b100000 ),
    .in_7( 7'b100000 ),
    .out( s22 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i24 (
    .D( dba ),
    .C( clock ),
    .Q( s26 )
  );
  assign s3 = s2[2:0];
  assign s4 = s2[15:3];
  assign s16 = s4[3:0];
  assign s25 = s4[2:0];
  assign s24 = s4[2:0];
  assign s5 = s4[8:0];
  assign s7 = s4[4:0];
  assign s10 = s4[7:0];
  assign ret = s4[8];
endmodule

module vga_blinkenlights (
  input clock,
  input [25:0] db,
  input [11:0] res_H,
  input [11:0] fp_H,
  input [11:0] sync_H,
  input [11:0] bp_H,
  input neg_H,
  input [11:0] res_V,
  input [11:0] fp_V,
  input [11:0] sync_V,
  input [11:0] bp_V,
  input neg_V,
  input [15:0] TD,
  input [7:0] MD,
  input [7:0] fbr_D,
  input [3:0] fbc_D,
  output [3:0] R,
  output [3:0] G,
  output [3:0] B,
  output hs,
  output vs,
  output de,
  output [10:0] TA,
  output [9:0] MA,
  output wen,
  output [8:0] fbw_A,
  output [7:0] fbw_D,
  output [8:0] fbr_A
);
  wire [6:0] s0;
  wire [7:0] X;
  wire [7:0] Y;
  wire vb;
  wire [4:0] s1;
  wire [15:0] s2;
  wire [5:0] s3;
  wire [5:0] s4;
  wire [4:0] s5;
  wire s6;
  wire [4:0] s7;
  wire [6:0] s8;
  assign s0 = fbr_D[6:0];
  vga_display vga_display_i0 (
    .clock( clock ),
    .res_H( res_H ),
    .fp_H( fp_H ),
    .sync_H( sync_H ),
    .bp_H( bp_H ),
    .neg_H( neg_H ),
    .res_V( res_V ),
    .fp_V( fp_V ),
    .sync_V( sync_V ),
    .bp_V( bp_V ),
    .neg_V( neg_V ),
    .char( s0 ),
    .fg( fbc_D ),
    .bg( 12'b0 ),
    .TD( TD ),
    .MD( MD ),
    .R( R ),
    .G( G ),
    .B( B ),
    .hs( hs ),
    .vs( vs ),
    .de( de ),
    .CX( X ),
    .CY( Y ),
    .vblank( vb ),
    .TA( TA ),
    .MA( MA )
  );
  assign s3 = X[5:0];
  DIG_Sub #(
    .Bits(6)
  )
  DIG_Sub_i1 (
    .a( s3 ),
    .b( 6'b100 ),
    .c_i( 1'b0 ),
    .s( s4 )
  );
  assign s7 = s4[4:0];
  assign s6 = s4[5];
  Mux_2x1_NBits #(
    .Bits(5)
  )
  Mux_2x1_NBits_i2 (
    .sel( s6 ),
    .in_0( s7 ),
    .in_1( 5'b0 ),
    .out( s5 )
  );
  assign fbr_A[4:0] = s5;
  assign fbr_A[8:5] = Y[3:0];
  debugcopy debugcopy_i3 (
    .db( db ),
    .clock( clock ),
    .e( vb ),
    .db_A( s1 ),
    .db_D( s2 )
  );
  vga_debugrender vga_debugrender_i4 (
    .db_D( s2 ),
    .clock( clock ),
    .\signed ( 1'b1 ),
    .hex( 1'b0 ),
    .fb_A( fbw_A ),
    .fb_D( s8 ),
    .fb_wen( wen ),
    .db_A( s1 )
  );
  assign fbw_D[6:0] = s8;
  assign fbw_D[7] = 1'b0;
endmodule
